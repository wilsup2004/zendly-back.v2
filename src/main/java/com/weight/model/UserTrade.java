package com.weight.model;
// Generated 1 oct. 2023, 21:30:36 by Hibernate Tools 5.4.33.Final

import java.util.Date;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.AttributeOverride;
import jakarta.persistence.AttributeOverrides;
import jakarta.persistence.Column;
import jakarta.persistence.ColumnResult;
import jakarta.persistence.ConstructorResult;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedNativeQuery;
import jakarta.persistence.SqlResultSetMapping;
import jakarta.persistence.Table;

/**
 * UserTrade generated by hbm2java
 */

@SqlResultSetMapping(
	    name="PropositionResult",
	    classes={
	      @ConstructorResult(
	        targetClass=com.weight.views.PropositionView.class,
	        columns={
	          @ColumnResult(name="idDispo", type=int.class),
	          @ColumnResult(name="idUserInitiateur", type=String.class),
	          @ColumnResult(name="idVol", type=String.class),
	          @ColumnResult(name="villeDepart", type=String.class),
	          @ColumnResult(name="dateDepart", type= Date.class),
	          @ColumnResult(name="villeArrivee", type=String.class),
	          @ColumnResult(name="dateArrivee", type=Date.class),
	          @ColumnResult(name="idUserCandidat", type=String.class),
	          @ColumnResult(name="nbKiloAchete", type=int.class),
	          @ColumnResult(name="idStatut", type=int.class),
	          @ColumnResult(name="libelStatut", type=String.class)
	      	
	        })})

@NamedNativeQuery(name = "reqLstPropositionByTransac",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and pr.id_dispo = :idDispo ",
resultSetMapping = "PropositionResult")

@NamedNativeQuery(name = "reqLstPropositionAcceptedByTransac",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and  pr.id_statut = 5 "
+"and pr.id_dispo = :idDispo ",
resultSetMapping = "PropositionResult")

@NamedNativeQuery(name = "reqLstPropositionByCandidat",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and pr.id_user_candidat = :idCandidat",
resultSetMapping = "PropositionResult")

@NamedNativeQuery(name = "reqLstPropositionByCandidatAndId",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and pr.id_user_candidat = :idCandidat "
+"and pr.id_dispo = :idDispo ",
resultSetMapping = "PropositionResult")


@NamedNativeQuery(name = "reqLstPropositionByCandidatAndStatut",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and pr.id_user_candidat = :idCandidat "
+"and pr.id_statut = :idStatut",
resultSetMapping = "PropositionResult")

@NamedNativeQuery(name = "reqLstPropositionByInitiateur",
query ="select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and tr.id_user_dispo = :idInitiateur ",
resultSetMapping = "PropositionResult")

@NamedNativeQuery(name = "reqLstPropositionByInitiateurAndStatut",
query = "select "
		+"tr.id_dispo as idDispo,"
		+"tr.id_user_dispo as idUserInitiateur,"
		+"tr.id_vol as idVol,"
		+"tr.ville_depart as villeDepart,"
		+"tr.date_depart as dateDepart,"
		+"tr.ville_arrivee as villeArrivee,"
		+"tr.date_arrivee as dateArrivee,"
		+"pr.id_user_candidat as idUserCandidat,"
		+"pr.nb_kilo_achete as nbKiloAchete,"
		+"pr.id_statut as idStatut,"
		+"st.libel_statut as libelStatut "
+"from users_dispo tr,user_trade pr,statuts st "
+"where tr.id_dispo = pr.id_dispo "
+"and  pr.id_statut = st.id_statut "
+"and tr.id_user_dispo = :idInitiateur "
+"and pr.id_statut = :idStatut",
resultSetMapping = "PropositionResult")



@Entity
@Table(name = "USER_TRADE")
@JsonIgnoreProperties({"hibernateLazyInitializer"})
public class UserTrade implements java.io.Serializable, Comparable<UserTrade> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "idDispo", column = @Column(name = "ID_DISPO", nullable = false)),
			@AttributeOverride(name = "idUserCandidat", column = @Column(name = "ID_USER_CANDIDAT", nullable = false)) })
	private UserTradeId id;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ID_STATUT", nullable = false, insertable = true, updatable = true)
	private Statuts statuts;
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_user_candidat",referencedColumnName="ID_USER", nullable = false, insertable = false, updatable = false)
	private Users users;
	
	@Column(name = "NB_KILO_ACHETE")
	private Integer nbKiloAchete;

	public UserTrade() {
	}

	public UserTrade(UserTradeId id, Users users) {
		this.id = id;
		this.users = users;
	}

	public UserTrade(UserTradeId id, Statuts statuts, Users users, Integer nbKiloAchete) {
		this.id = id;
		this.statuts = statuts;
		this.users = users;
		this.nbKiloAchete = nbKiloAchete;
	}

	public UserTradeId getId() {
		return this.id;
	}

	public void setId(UserTradeId id) {
		this.id = id;
	}

	public Statuts getStatuts() {
		return this.statuts;
	}

	public void setStatuts(Statuts statuts) {
		this.statuts = statuts;
	}

	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	public Integer getNbKiloAchete() {
		return this.nbKiloAchete;
	}

	public void setNbKiloAchete(Integer nbKiloAchete) {
		this.nbKiloAchete = nbKiloAchete;
	}

	@Override
	public int compareTo(UserTrade o) {
		return Integer.compare(this.getId().getIdDispo(), o.getId().getIdDispo());
	}

}
